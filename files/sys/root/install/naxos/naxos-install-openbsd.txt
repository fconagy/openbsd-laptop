


        Installing OpenBSD 7.4 on the Asus laptop


    Hardware

It is an Asus UX410U laptop.
  Processor: Intel i5 8250U 1.60 GHz
  Memory: 16 GB
  Graphics: Intel UHD graphics 620
  Disk: 128 GB SSD SATA port 2
  Disk: 1TB hard disk SATA port 0


    BIOS setup

Press F2 to get to ROM BIOS setup.
Set boot list to include USB drive first.
Enable legacy USB support.
SATA mode is AHCI.
Enable CSM support for old BIOS boot.
Also the video setting will work right with that.
Disable 'Launch PXE OpROM policy'.
Set administrator and user passwords.
Disable secure boot.


    Boot

Press F2 to get to ROM BIOS.
Select 'Boot menu'.
Choose UEFI Kingston ... for the memory stick.


    Base install

Boot OpenBSD 7.4 memory stick.
Choose to get to shell.
Check disks:
  dmesg | grep sd
we got:
  sd0   1 TB Toshiba
  sd1 128 GB Hitachi flash drive
  sd2 128 MB Kingston memory stick
Enable existing disks.
  cd /dev
  sh MAKEDEV sd0
  sh MAKEDEV sd1
  sh MAKEDEV sd2
  cd /
Sanitize disks.
  disklabel sd0
  dd if=/dev/zero of=/dev/rsd0c bs=1M count=64
  disklabel sd1
  dd if=/dev/zero of=/dev/rsd1c bs=1M count=64

The destination disk is sd1.

Boot OpenBSD 7.4 memory stick.
Select install.
United Kingdom keymap: uk
Select host name: naxos
Configure network interfaces: done.
DNS domain name: lan
DNS name servers: none
Set root password.
Start SSHD by default: no.
Do you want X window system to be started: no
Which disk is the root disk: sd1
Encrypt the root disk: no
Use whole disk for GPT: gpt
Edit auto layout: E
Leave the MSDOS partition, delete the rest.
Then define partitions.
  a /    8192M
  b swap 8192M
  d /tmp 4096M
  e /var 8192M
  f /usr rest
Write, quit.
Leave alone sd0 and sd2 (done).

Install the sets.
Location of sets: disk
Is the partition already mounted: no
Which disk contains the install media: sd2
Which partition has the install sets: a
Pathname to the sets: Accept default.
Select sets. All sets selected by default, accept default
Continue without verification: yes

Installation starts.
After it did finish asks again for location of sets,
accept the default which is 'done'.
What time zone you are in: UTC

Instead of running fw_update manually afterwards we
will install just the selected firmware sets later on.

Accept the default to reboot.

Boots with BIOS.


    Save disk information

Save the top blocks containing the GPT or MBR partition table.
  dd if=/dev/rsd1c of=disk-64-blocks.dd bs=512 count=64
Save label and top of the disk on the OpenBSD partition.
  dd if=/dev/rsd1c of=disk-2048-blocks.dd bs=512 count=2048


    Hardening

Run hardening script.
  cd scripts
  ./hardening.sh
Mostly unwanted daemons.
Check:
  netstat -an | egrep -e '^tcp|^udp'
There should be no open ports.
  ps -axu
There should be no unnecessary daemons running.


    Install packages

Use the script to install packages.
  cd scripts
  ./packages-install.sh


    Install firmware

Download firmware:
  mkdir /h/mnt/user90/naxos/firmware
  ln -s /h/mnt/user90/naxos/firmware /h/firmware
  cd /h/firmware
  wget -nH -nd -np -r -l 1 http://firmware.openbsd.org/firmware/7.4/
  rm index.html*

Install the necessary firmware.


    Prepare for kernel build

Get the release source tarballs.
  cd syssrc
  ./get-syssrc.sh
Will also check the signatures.
Unpack tarballs into /usr/src, /usr/ports, /usr/xenocara.
  ./source-unpack.sh
Set protections so future CVS updates can go to this place.
  ./set-protections.sh


    Kernel build

Create the kernel config file.
  cd /usr/src/sys/arch/amd64/conf
  cp GENERIC.MP NAXOS.MP
  cd ~/scripts
  ./kernel-rebuild.sh 2>&1 | tee kernel-rebuild.log
Test build seems ok.

Kernel config file changes.
  cd /usr/src/sys/arch/amd64/conf
  vi NAXOS.MP

Disable IPV6 and IPSEC.
  mod /usr/src/sys/conf/GENERIC
  vi /usr/src/sys/conf/GENERIC

Green is the colour.
  mod /usr/src/sys/dev/wscons/wsdisplayvar.h
  vi /usr/src/sys/dev/wscons/wsdisplayvar.h
On the top change WS_DEFAULT_FG to green.
Rebuild kernel and reboot.


    Standalone things.

In
  cd /usr/src/sys/arch/amd64/stand
  make
  make install
to build the standalone stuff for booting.
This is the .EFI files in the FAT formatted
partition and the boot block for the OS.
Issuing make install should find the EFI boot
partition and update the EFI modules there.


    Silent boot

To redirect console to a serial terminal usually
works but with OpenBSD when there is no actual
serial connection the boot process blocks at some
point and the system freezes. So things needed
to be disabled in files in the standalone source
tree.

There is a preprocessor constant BOOT_QUIET which
does part of the job. Add
  option BOOT_QUIET
to the kernel config file.

There are two directories, in the source tree to
consider, the machine specific
  /usr/src/sys/arch/amd64/stand
and generic
  /usr/src/sys/stand
The modified files are
  /usr/src/sys/arch/amd64/conf/NAXOS.MP
  /usr/src/sys/conf/GENERIC
  /usr/src/sys/dev/wscons/wsdisplayvar.h
  /usr/src/sys/stand/boot/boot.c
  /usr/src/sys/arch/amd64/stand/efiboot/efiboot.c
  /usr/src/sys/arch/amd64/stand/libsa/machdep.c
  /usr/src/sys/arch/amd64/stand/biosboot/biosboot.S
  /usr/src/sys/ddb/db_elf.c
  /usr/src/sys/arch/amd64/stand/mbr/mbr.S
  /usr/src/sys/arch/amd64/stand/efiboot/machdep.c
  /usr/src/sys/arch/amd64/stand/efiboot/diskprobe.c
  /usr/src/sys/arch/amd64/stand/libsa/bioscons.c
  /usr/src/sys/arch/amd64/include/loadfile_machdep.h
  /usr/src/sys/lib/libsa/printf.c
  /usr/src/sys/arch/amd64/stand/efiboot/exec_i386.c
Modifications marked with '!!!!' as usual, they are
mostly printf-s commented out. In printf.c there is
a flag 'donottwiddle' which is enabled.
Rebuild kernel and reboot.

The init system is silenced with a wrapper.
The old one is renamed to rc.silent.
  mv /etc/rc /etc/rc.silent
The new /etc/rc is:
  exec /bin/sh /etc/rc.silent $* >/dev/null 2>&1
  #exec /bin/sh /etc/rc.silent $*
Note that file systems are remounted r/w only at a
later stage so we can't have a log file at this point.

Create /etc/boot.conf and put a boot command in it.
  boot hd0a:/bsd


    Console

Default word selection with the mouse is not very good
for doubleclick selection of filenames. In
  /usr/src/sys/dev/wscons/wsdisplay.c
there is a charClass table a la xterm. Modify that
to include the usual non-alphabetic characters in
filenames.

For the console the size of the font to be used is
determined by the resolution of the screen, so as not
to have too minuscule font on a high resolution screen.
The default font is a bit too large, so to make it smaller
changes are to be made in rasops subsystem.
The logic is in the file
  /usr/src/sys/dev/rasops/rasops.c
just one line change to make the font smaller.
Rebuild kernel and reboot.


    Host firewall packet filtering.

Update /etc/pf.conf. Simple rules, interface agnostic.


    Second disk

Format and mount the second disk.
  cd scripts
  ./newfs-toshiba.sh >newfs-toshiba.log 2>&1
Update /etc/fstab.


    Console terminals

Remove 'secure' for the console so it will ask root
password for single user boot.
  mod /etc/ttys
  vi /etc/ttys

Switch of getty on C0 because that screen is flashed
when X restarts. We want that screen black.
In
  /etc/X11/xenodm/GiveConsole
add killing the console mouse daemon since that is not
compatible with X11.
In
  /etc/X11/xenodm/Xresources
set up login window. There are strange issues with the
fonts, also in Xsetup_0 I had to specify DPI.
It includes /etc/xenodm/local.def which contains the
local host name, file created by /etc/rc.local.
Failsafe login disabled.
In 
  /etc/X11/xenodm/Xservers
change to no background and no reset. Also possible to
have an another instance of X running on a different
screen.
In
  /etc/X11/xenodm/Xsetup_0
Switches on NumLock LED so we can see that the machine is on.
We call
  /etc/X11/xenodm/x-displays
from Xsetup. That script deals with various multiple screen setups.
Config file
  /etc/X11/xenodm/xenodm-config
left alone, actually.

Added: don't add. Actually this is outdated and the modesetting
driver is just fine. Also there is a bug in this driver which
makes the second screen freeze.
  /etc/X11/xorg.conf.d/20-intel.conf
which is:

  # Force the Intel driver instead of the modesetting driver.
  # Modesetting is also good but the Intel seems to be faster.

  # Intel graphics, should detect the proper chipset.
  # Sometimes TearFree required for smooth video.
  # PageFlip might be necessary with Displaylink (in my experience
  # DisplayLink works only on a separate screen like :1 anyway)
  # and uses more CPU.
  Section "Device"
    Identifier   "Intel Graphics"
    Driver       "intel"
    # Added the next two lines.
    Option       "AccelMethod" "sna"
    Option       "DRI" "iris"
    #Option      "TearFree" "true"
    #Option      "PageFlip" "false"
  EndSection

to specify Intel graphics chipset, otherwise it will use
the modesetting driver.

The local startup script /etc/rc.local creates a file
/etc/xenodm/local.def which contains the local hostname and
it will be included in Xresrouces. Will also start xenodm at the end.


    Local startup files

The local startup script is
  /etc/rc.local
Creates virtual consoles, removes setuid bits declared unnecessary,
disconnects from network, deals with various hardware settings,
starts our simplified print daemon and starts xenodm at the end.
Config file
  /etc/rc.conf.local
specifies most daemons not to start. The sound daemon will enable
the first two sound cards, which would be one in the machine and
one in the port replicator.


    Printing

We have got PostScript laser printers connected via a USB/Parallel
port dongle. There is a simplified print spooler daemon which
just copies the file onto the port. The config file
  /etc/printcap
describes the printer. The daemon starts from /etc/rc.local.


    Privileged operations

In OpenBSD there is no sudo, which is probably a good thing.
The functionality is provided by doas. In
  /etc/doas.conf
we got shutdown/reboot, cdrom etc. access defined.


    Cosmetic changes

In
  /etc/gettytab
we customize login prompts.


    Outside file access

OpenBSD has the unveil mechanism to restrict file access
for application. This is mostly used for the browsers.
Some typical directories like ~/tmp had been added.
  /etc/firefox-esr/unveil.main
  /etc/iridium/unveil.main


    Limits and login

There is
  /etc/login.conf
which sets the resource limits and configures login.


    Logging

Logging is done via syslog. Make sure that it does not bind
a port. Also we don't want console logging, which is how it
is now in /etc/syslog.conf.

Log files are rotated and archived via newsyslog. This has
a root cron job
  /var/cron/tabs/root
and
  newsyslog.conf
config file. Archive to /h/save/logs, make sure that it does
exist.


    Timekeeping

We don't use ntpd, check
  /etc/ntpd.conf
We run
  /root/bin/set-time
from crontab, which runs ntpdate when connected to the network.


    Device driver for the random number generator

The documentation about how to write a device driver is somewhat
terse.

Follows the pseudo device driver mixrng.

In file
  /usr/src/etc/MAKEDEV.common
add lines after the definition of kstat.
  dnl !!!! Addition.
  target(all, mixrng)dnl
Note the funky syntax for dnl.
Also similar changes
  /usr/src/etc/etc.amd64/MAKEDEV.md:
add after the kstat definition:
  dnl !!!! Added.
  _DEV(mixrng, 101)

In file
  /usr/src/sys/arch/amd64/amd64/conf.c
above 'struct cdevsw'
  /* !!!! Added. */
  #include "mixrng.h"

In file
  /usr/src/sys/arch/amd64/amd64/conf.c
above 'int nchrdev' in the structure definition as the last item
/* !!!! Added. */
    cdev_mixrng_init(NMIXRNG,mixrng),   /* 101: Mix RNG */
Note the trailing command and the device major number 101.

Include the device in the kernel config file
  /usr/src/sys/arch/amd64/conf/NAXOS.MP
as
  pseudo-device   mixrng
after 'pseudo-device dt'.

After the definition of pseudo-device dt in the file
  /usr/src/sys/conf/files
add
  # !!!! Added.
  pseudo-device mixrng
  file    dev/mixrng.c                mixrng  needs-flag

Add the files for the device driver
  /usr/src/sys/dev/mixrngio.h
  /usr/src/sys/dev/mixrng.c
as new files.

In file
  /usr/src/sys/sys/conf.h
add after the definition of cdev_dt_init

  /* !!!! Added. */
  /* open, close, read, write, ioctl */
  #define cdev_mixrng_init(c,n) { \
    dev_init(c,n,open), \
    dev_init(c,n,close), \
    dev_init(c,n,read), \
    dev_init(c,n,write), \
    dev_init(c,n,ioctl), \
    (dev_type_stop((*))) enodev, 0, selfalse, \
    (dev_type_mmap((*))) enodev, 0, D_CLONE }

and after 'cdev_decl(kcov);' add
  /* !!!! Added. */
  cdev_decl(mixrng);

In
  /usr/src/sys/sys/conf.h
after '#define cdev_dt_init' add
  /* !!!! Added. */
  /* open, close, read, write, ioctl */
  #define cdev_mixrng_init(c,n) { \
    dev_init(c,n,open), \
    dev_init(c,n,close), \
    dev_init(c,n,read), \
    dev_init(c,n,write), \
    dev_init(c,n,ioctl), \
    (dev_type_stop((*))) enodev, 0, \
    (dev_type_mmap((*))) enodev, 0, D_CLONE }
 
Now for the Quantis USB quantum random number generator.

Enable qrng device in the kernel config file.
In
  /usr/src/sys/arch/amd64/conf/NAXOS.MP
add
  qrng*   at uhub?        # Quantis rng
In
  /usr/src/sys/dev/usb/files.usb
add
  device qrng
  attach qrng at uhub
  file   dev/usb/qrng.c      qrng

Add file
  /usr/src/sys/dev/usb/qrng.c

Build the kernel like:
  cd scripts
  ./kernel-rebuild.sh 2>&1 | tee kernel-rebuild.log


    Printing

Printing is made complicated with lpd and printcap.
A very simple print system has been implemented with
two small scripts. We got a daemon
  /root/bin/printd
which is watching the spool directory (/var/spool/output/print)
and when a file shows up just copies it to the printer,
assumed to be a PostScript printer. The
  /usr/bin/lpr
executable had been replaced with a script which just copies
the PostScript file to the spool.


    Green on black

The green on black theme is a tarball under directory ~/green-on-black.
It contains the modified files
  gtk-2.0/gtkrc
  gtk-3.0/applications.css
  gtk-3.0/gtk-widgets.css

The tarball should be untarred in
  /usr/local/share/themes


    Fingerprint build original

This is the first build the fingerprint login style,
from the original FreeBSD sources as it came from ports.
Use the next paragraph if you already have the modified
tarball.
  cd /usr/ports/sysutils/login_fingerprint
  make
That will build and install libfprint 8.2 which
in fact does not work. At least not for the UPEK I got.
But it gives the source for those.
  cd /usr/ports/security/libfprint
  make deinstall

Use the files from the FreeBSD 11 ports directory tree
which would be libfprint version 0.7.0.
  cd fingerprint/fprint-freebsd-11
  cd src
  tar -z -xf ../tar/libfprint.tar.gz
  cd libfprint-0.7.0

It is prepared to compile now. Since this was lifted
from an already built system the patches are alread done.
In case you would need the patches:
  patch < ../../files/patch-config.h.in
  patch < ../../files/patch-libfprint-drivers-vfs301.c
  patch < ../../files/patch-libfprint-drivers-vfs301_proto.c
  patch < ../../files/patch-libfprint-drivers-vfs301_proto.h
  patch < ../../files/patch-libfprint_Makefile.in

Then the usual:
  make clean
  ./configure --disable-udev-rules
  make
It will fail when it tries to deal with the udev rules. We have
no udev on OpenBSD. So this needs to be disabled in the make file.
Also try compile with gcc and -O0.
Re-run and then:
  make install
will also put files under /usr/local/libdata/pkgconfig which is
a FreeBSD thing I presume it should be OK.
We should have libfprint now.

Buld fprint_demo
  export FPRINT_CFLAGS="-I/usr/local/include/libfprint"
  export FPRINT_LIBS="-L/usr/local/lib -lfprint"
  ./configure
  make


    Fingerprint

In the directory
  cd ~/fingerprint
First build the library.
  cd libfprint-baspi-bsapi
  make clean
  make distclean
  ls -l /usr/local/bin/autoconf*
  # You will see the version.
  export AUTOCONF_VERSION=2.69
  # Actually udev had bee defanged in the source so can do without.
  ./configure --disable-udev-rules
  make
  make install
  make clean
Then
  cd ../login_fingerprint
  make
  make install
  make clean

To enable the fingerprint authentication you have to have
the login_fingerprint executable under /usr/libexec/auth
with the right permissions. Then modify /etc/login.conf
like:
  vi /etc/login.conf
add stanza
  fingerprint:\
    :auth=fingerprint,passwd:\
    :x-fingerprint=7:\
    :tc=default:
as a class defintion. Update the database:
  cap_mkdb /etc/login.conf
Then you have to have the class also assigned to the
user in /etc/master.passwd. It is the field which comes
after the primary group id.
Specify the auth stanza in /etc/login.conf like:
  fconagy:\
	:auth=passwd,yubikey:

Modify
  mod /usr/src/libexec/login_passwd/login_passwd.c
  mod edit login_passwd.c
and add space at the password prompt for a subtle change.
  cd /usr/src/libexec/login_passwd
  make
  make install
  make clean

Modify
  mod /usr/src/usr.bin/login/login.c
  vi /usr/src/usr.bin/login/login.c
add further checks.
  cd /usr/src/usr.bin/login
  make
  make install
  make clean

In
  /usr/src/sys/arch/amd64/amd64/machdep.c
change the initial value of
  lid_action = 0;
from 1.
Rebuild kernel afterwards.


    Disable GVFS

GVS is in the way. Disable it.
  cd ~/scripts
  ./gvfs.sh disable


    XFCE screensaver

Disable the screensaver, it kicks in even when
there is an another screensaver configured. Also
gets the whole system locked up.
  cd ~/scripts
  ./xfce4-screensaver.sh disable
Use
  slock
instead.

    DHCLIENT does not work and not supported

Use dhcpleased.


    Fonts issues

There are issues with fontconfig. Fonts which
show up in font path in xset
  xset q
does not recognized in applications. Appearantly
there is a second method to handle fonts, with
fontconfig. Copy the font descriptions for fontconfig:
  cp -p ~/fontconfig/* /etc/fonts/conf.avail/
  cd /etc/fonts/conf.d
  for F in `ls ~/fontconfig`
  do
	ln -s ../conf.avail/$F $F
  done
Then run
  cd ~/scripts
  ./font-recache.sh

Still the 3270 fonts do not recognised. Not show in
fc-list, fc-cache reports 0 fonts in that directory.
Use the fonts from the kit, that is in many different
formats, copy all those to ~/.fonts/ and then it should
work.


    Ethernet interface

The interface ure0 in the port replicator is buggy.
If it was to be shut down or disconnected it is not
possible to restart.


    Youtube downloader

The old youtube-dl is dead. A fork which works is
  https://github.com/yt-dlp/yt-dlp

Get the tarball and build as non-root.
  wget https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.tar.gz
  tar -z -xf yt-dlp.tar.gz
  cd yt-dlp
  gmake clean
  gmake yt-dlp
  gmake yt-dlp.1
This should build the python script-executable.
  cp yt-dlp ~/local/bin/
  cp yt-dlp.1 ~/local/man/man1/
The ydl script should work just the same as before.


